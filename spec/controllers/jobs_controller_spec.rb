require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe JobsController do

  # This should return the minimal set of attributes required to create a valid
  # Job. As you add validations to Job, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {:name => "Test job", :frequency => 3600, :expected_run_time => 3600} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # JobsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:all) do
    ENV['CRONUT_PRIVATE_KEY'] = ENV['CRONUT_PRIVATE_KEY'] || OpenSSL::PKey::RSA.generate(1024).to_s
  end

  before(:each) do
    basic_auth_login
  end

  after(:all) do
    ActiveRecord::Base.connection.reset_pk_sequence!('jobs')
    ActiveRecord::Base.connection.reset_pk_sequence!('notifications')
  end

  describe "GET index" do
    it "assigns all jobs as @jobs" do
      @jobs = Job.all.to_a
      job = IntervalJob.create! valid_attributes
      @jobs << job
      @jobs.sort_by! { |j| [j.next_scheduled_time, j.name]}
      get :index, {}, valid_session
      assigns(:jobs).should eq(@jobs)
    end
  end

  describe "GET show" do
    it "assigns the requested job as @job" do
      job = IntervalJob.create! valid_attributes
      get :show, {:id => job.to_param}, valid_session
      assigns(:job).should eq(job)
    end
  end

  describe "GET new" do
    it "assigns a new job as @job" do
      get :new, {}, valid_session
      assigns(:job).should be_a_new(Job)
    end
  end

  describe "GET edit" do
    it "assigns the requested job as @job" do
      job = IntervalJob.create! valid_attributes
      get :edit, {:id => job.to_param}, valid_session
      assigns(:job).should eq(job)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Job" do
        expect {
          post :create, {:job => valid_attributes.merge(type: "IntervalJob")}, valid_session
        }.to change(Job, :count).by(1)
      end

      it "assigns a newly created job as @job" do
        post :create, {:job => valid_attributes.merge(type: "IntervalJob")}, valid_session
        assigns(:job).should be_a(Job)
        assigns(:job).should be_persisted
      end

      it "redirects to the created job" do
        post :create, {:job => valid_attributes.merge(type: "IntervalJob")}, valid_session
        response.should redirect_to(IntervalJob.order('id').last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved job as @job" do
        # Trigger the behavior that occurs when invalid params are submitted
        IntervalJob.any_instance.stub(:save).and_return(false)
        post :create, {:job => {  }}, valid_session
        assigns(:job).should be_a_new(Job)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        IntervalJob.any_instance.stub(:save).and_return(false)
        post :create, {:job => {  }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested job" do
        job = IntervalJob.create! valid_attributes
        # Assuming there are no other jobs in the database, this
        # specifies that the Job created on the previous line
        # receives the :update_attributes message with NO params, since these are not permitted attributes
        expect_any_instance_of(IntervalJob).to receive(:update_attributes).with({ "name" => "updated name" })
        put :update, {:id => job.to_param, :job => { "name" => "updated name" }}, valid_session
      end

      it "assigns the requested job as @job" do
        job = IntervalJob.create! valid_attributes
        put :update, {:id => job.to_param, :job => valid_attributes}, valid_session
        assigns(:job).should eq(job)
      end

      it "redirects to the job" do
        job = IntervalJob.create! valid_attributes
        put :update, {:id => job.to_param, :job => valid_attributes}, valid_session
        response.should redirect_to(job)
      end
    end

    describe "with invalid params" do
      it "assigns the job as @job" do
        job = IntervalJob.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        IntervalJob.any_instance.stub(:save).and_return(false)
        expect {
            put :update, {:id => job.to_param, :job => {  }}, valid_session
        }.to raise_error(ActionController::ParameterMissing)
      end

      it "to not allow requests without the mandatory params" do
        job = IntervalJob.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        IntervalJob.any_instance.stub(:save).and_return(false)
        expect {
            put :update, {:id => job.to_param, :job => {  }}, valid_session
        }.to raise_error(ActionController::ParameterMissing)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested job" do
      job = IntervalJob.create! valid_attributes
      expect {
        delete :destroy, {:id => job.to_param}, valid_session
      }.to change(Job, :count).by(-1)
    end

    it "redirects to the jobs list" do
      job = IntervalJob.create! valid_attributes
      delete :destroy, {:id => job.to_param}, valid_session
      response.should redirect_to(jobs_url)
    end
  end

  describe "GET ping_start" do
    before(:each) do
      @job = IntervalJob.create!({:name => "Test IntervalJob", :frequency => 600, :expected_run_time => 300})
      token_value = SecureRandom.hex
      @token = ApiToken.create!({
        :name => "Test token",
        :token => token_value
      })
      @str = "#{(Time.now - 5.seconds).to_i.to_s}-#{@job.public_id}"
    end

    after(:each) do
      @job.destroy
      @token.destroy
    end

    it "ignores request without token" do
      get :ping, {:type => "start", :public_id => @str}, valid_session
      response.body.should eql "Empty token given."
    end

    it "ignores request with invalid token" do
      request.headers[JobsController::API_TOKEN_HEADER] = "x"
      get :ping, {:type => "start", :public_id => @str}, valid_session
      response.body.should eq "Invalid token."
    end

    it "ignores pings with unencrypted public id" do
      request.headers[JobsController::API_TOKEN_HEADER] = @token.token
      expect {
        post :ping, {:type => "start", :public_id => @str}, valid_session
      }.to raise_error(ActiveRecord::RecordNotFound)
      @job.reload
      @job.last_successful_time.should be_nil
    end

    it "ignores pings with encrypted wrong id" do
      wrong_str = "#{Time.now.to_i.to_s}-abc"
      request.headers[JobsController::API_TOKEN_HEADER] = @token.token
      expect {
        post :ping, {:type => "start", :public_id => Encryptor.encrypt(wrong_str)}, valid_session
      }.to raise_error(ActiveRecord::RecordNotFound)
      @job.reload
      @job.last_successful_time.should be_nil
    end

    it "ignores pings with encrypted wrong date" do
      wrong_str = "#{(Time.now - 31.seconds).to_i.to_s}-#{@job.public_id}"
      request.headers[JobsController::API_TOKEN_HEADER] = @token.token
      expect {
        post :ping, {:type => "start", :public_id => Encryptor.encrypt(wrong_str)}, valid_session
      }.to raise_error(ActiveRecord::RecordNotFound)
      @job.reload
      @job.last_successful_time.should be_nil
    end

    it "pings start with valid token" do
      request.headers[JobsController::API_TOKEN_HEADER] = @token.token
      post :ping, {:type => "start", :public_id => Encryptor.encrypt(@str)}, valid_session
      @job.reload
      response.status.should eq 200
      @job.last_successful_time.should_not be_nil
    end

    it "pings end with valid token" do
      request.headers[JobsController::API_TOKEN_HEADER] = @token.token
      post :ping, {:type => "end", :public_id => Encryptor.encrypt(@str)}, valid_session
      @job.reload
      response.status.should eq 200
      @job.next_end_time.should eq (@job.next_scheduled_time + @job.expected_run_time)
    end
  end

  describe "GET ping_end" do
    before(:each) do
      @job = IntervalJob.create!({:name => "Test IntervalJob", :frequency => 600, :expected_run_time => 300})
      token_value = SecureRandom.hex
      @token = ApiToken.create!({
        :name => "Test token",
        :token => token_value
      })
      @str = "#{(Time.now - 5.seconds).to_i.to_s}-#{@job.public_id}"
    end

    after(:each) do
      @job.destroy
      @token.destroy
    end

    it "ignores request without token" do
      get :ping, {:type => "end", :public_id => @str}, valid_session
      response.body.should eql "Empty token given."
    end

    it "ignores request with invalid token" do
      request.headers[JobsController::API_TOKEN_HEADER] = "x"
      get :ping, {:type => "end", :public_id => @str}, valid_session
      response.body.should eq "Invalid token."
    end

    it "ignores pings with unencrypted public id" do
      request.headers[JobsController::API_TOKEN_HEADER] = @token.token
      expect {
        post :ping, {:type => "end", :public_id => @str}, valid_session
      }.to raise_error(ActiveRecord::RecordNotFound)
      @job.reload
      @job.last_successful_time.should be_nil
    end

    it "ignores pings with encrypted wrong id" do
      wrong_str = "#{Time.now.to_i.to_s}-abc"
      request.headers[JobsController::API_TOKEN_HEADER] = @token.token
      expect {
        post :ping, {:type => "end", :public_id => Encryptor.encrypt(wrong_str)}, valid_session
      }.to raise_error(ActiveRecord::RecordNotFound)
      @job.reload
      @job.last_successful_time.should be_nil
    end

    it "ignores pings with encrypted wrong date" do
      wrong_str = "#{(Time.now - 31.seconds).to_i.to_s}-#{@job.public_id}"
      request.headers[JobsController::API_TOKEN_HEADER] = @token.token
      expect {
        post :ping, {:type => "end", :public_id => Encryptor.encrypt(wrong_str)}, valid_session
      }.to raise_error(ActiveRecord::RecordNotFound)
      @job.reload
      @job.last_successful_time.should be_nil
    end

    it "pings end with valid token" do
      job_initial_time = @job.last_successful_time
      request.headers[JobsController::API_TOKEN_HEADER] = @token.token
      post :ping, {:type => "end", :public_id => Encryptor.encrypt(@str)}, valid_session
      @job.reload
      response.status.should eq 200
      @job.last_successful_time.should eq job_initial_time
    end

    it "pings end with valid token" do
      request.headers[JobsController::API_TOKEN_HEADER] = @token.token
      post :ping, {:type => "end", :public_id => Encryptor.encrypt(@str)}, valid_session
      @job.reload
      response.status.should eq 200
      @job.next_end_time.should eq (@job.next_scheduled_time + @job.expected_run_time)
    end
  end


end
